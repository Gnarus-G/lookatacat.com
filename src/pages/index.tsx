import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { env } from "../env/server.mjs";
import { trpc } from "../utils/trpc";

type Cat = {
  name: string;
  url: string;
  uploadedAt: number;
  isVideo: boolean;
};

type Props = {
  cats: Cat[];
};

const Home: NextPage<Props> = ({ cats }) => {
  const hello = trpc.proxy.example.hello.useQuery({ text: "from tRPC" });

  return (
    <>
      <Head>
        <title>Marceline</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {cats
        .sort((a, b) => +b.uploadedAt - +a.uploadedAt)
        .map(({ name, url, isVideo }) =>
          isVideo ? (
            <video src={url} autoPlay loop playsInline>
              <track kind="captions" />
            </video>
          ) : (
            <Image
              width={300}
              height={300}
              loading="lazy"
              src={url}
              alt={`Marceline named as ${name}`}
            />
          )
        )}
      <div>{hello.data ? <p>{hello.data.greeting}</p> : <p>Loading..</p>}</div>
    </>
  );
};

export default Home;

export const getStaticProps: GetStaticProps = async () => {
  type CatAsset = { path: string; type: string; uploadedAt: string };

  const objs = await fetch(env.WORKER_ENDPOINT)
    .then((res) => res.json())
    .then((d) => d.assets as CatAsset[]);

  const cats = objs.map((p) => ({
    name: p.path,
    url: `${env.WORKER_ENDPOINT}${p.path}`,
    uploadedAt: new Date(p.uploadedAt).getTime(),
    isVideo: p.type.includes("video"),
  }));

  return {
    props: {
      cats,
    } as Props,
  };
};
