// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Cat {
  id          String     @id @default(cuid())
  name        String     @unique
  owner       User       @relation("cat_ownership", fields: [ownerId], references: [id], onUpdate: NoAction)
  pics        CatPic[]
  videos      CatVideo[]
  ownerId     String
  favoritedBy User[]
}

model CatPic {
  url    String @id
  catId  String
  forCat Cat    @relation(fields: [catId], references: [id])
}

model CatVideo {
  url    String @id
  catId  String
  forCat Cat    @relation(fields: [catId], references: [id])
}

// Email allowed to register 
model Invitee {
  email String @id
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  cats          Cat[]     @relation("cat_ownership")

  favoriteCat   Cat?    @relation(fields: [favoriteCatId], references: [id])
  favoriteCatId String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
